<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MyStock" xml:space="preserve">
    <value>My Stock</value>
    <comment>MainPage</comment>
  </data>
  <data name="ExpiringSoon" xml:space="preserve">
    <value>Expiring Soon</value>
    <comment>MainPage</comment>
  </data>
  <data name="ExpiresToday" xml:space="preserve">
    <value>Expires Today</value>
    <comment>MainPage</comment>
  </data>
  <data name="Expired" xml:space="preserve">
    <value>Expired</value>
    <comment>MainPage</comment>
  </data>
  <data name="MyStorageLocations" xml:space="preserve">
    <value>My Storage Locations</value>
    <comment>MainPage</comment>
  </data>
  <data name="NoDataTitle" xml:space="preserve">
    <value>Oh, it looks really empty here!</value>
    <comment>MainPage</comment>
  </data>
  <data name="NoDataDescription" xml:space="preserve">
    <value>It seems you haven't added any storage spots, like a fridge or pantry, to the app for tracking your food.</value>
    <comment>MainPage</comment>
  </data>
  <data name="GetStarted" xml:space="preserve">
    <value>Let's get started!</value>
    <comment>MainPage</comment>
  </data>
  <data name="StartWithSuggestedLocations" xml:space="preserve">
    <value>Start with suggested locations</value>
    <comment>MainPage</comment>
  </data>
  <data name="SuggestedLocationsDescription" xml:space="preserve">
    <value>We'll create some basic locations for you, such as 'fridge' and 'pantry,' so you can hit the ground running! Feel free to rename or delete these locations later on.</value>
    <comment>MainPage</comment>
  </data>
  <data name="StartWithSuggestedLocationsAndStock" xml:space="preserve">
    <value>Start with suggested locations and stock</value>
    <comment>MainPage</comment>
  </data>
  <data name="SuggestedLocationsAndStockDescription" xml:space="preserve">
    <value>Not only will we add locations like 'fridge,' but we'll also include some food items to show you how it all works! You're free to customize or remove these locations and items later.</value>
    <comment>MainPage</comment>
  </data>
  <data name="CreateNewLocationLinkText" xml:space="preserve">
    <value>Create a new location</value>
    <comment>MainPage</comment>
  </data>
  <data name="CreateNewLocationDescription" xml:space="preserve">
    <value>Start by creating a new location, like your fridge, to begin organizing your food.</value>
    <comment>MainPage</comment>
  </data>
  <data name="AddEntry" xml:space="preserve">
    <value>Add Entry</value>
    <comment>MainPage</comment>
  </data>
  <data name="CreateNewLocation" xml:space="preserve">
    <value>Create New Location</value>
    <comment>MainPage</comment>
  </data>
  <data name="XItems" xml:space="preserve">
    <value>{0} entries</value>
    <comment>MainPage</comment>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>Don't let me expire</value>
    <comment>AppShell</comment>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
    <comment>AppShell</comment>
  </data>
  <data name="DeleteImage" xml:space="preserve">
    <value>Delete Image</value>
    <comment>ItemPage</comment>
  </data>
  <data name="TapToAddImage" xml:space="preserve">
    <value>Tap here to add an image</value>
    <comment>ItemPage</comment>
  </data>
  <data name="ErrorsHeader" xml:space="preserve">
    <value>There are some errors!</value>
    <comment>ItemPage</comment>
  </data>
  <data name="ErrorsSubHeader" xml:space="preserve">
    <value>Correct them below and try again.</value>
    <comment>ItemPage</comment>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
    <comment>ItemPage</comment>
  </data>
  <data name="StorageLocation" xml:space="preserve">
    <value>Storage location</value>
    <comment>ItemPage</comment>
  </data>
  <data name="ExpirationDate" xml:space="preserve">
    <value>Expiration Date</value>
    <comment>ItemPage</comment>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Amount</value>
    <comment>ItemPage</comment>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
    <comment>ItemPage</comment>
  </data>
  <data name="Today" xml:space="preserve">
    <value>Today</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="Tomorrow" xml:space="preserve">
    <value>Tomorrow</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="Yesterday" xml:space="preserve">
    <value>Yesterday</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="LastWeek" xml:space="preserve">
    <value>Last week</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="XDaysAgo" xml:space="preserve">
    <value>{0} days ago</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="InXDays" xml:space="preserve">
    <value>In {0} days</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="NextWeek" xml:space="preserve">
    <value>Next week</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="InTwoWeeks" xml:space="preserve">
    <value>In two weeks</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="InThreeWeeks" xml:space="preserve">
    <value>In three weeks</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="InMoreThanAMonth" xml:space="preserve">
    <value>In more than a month</value>
    <comment>DateToRelativeStringConverter</comment>
  </data>
  <data name="RequiredErrorMessage" xml:space="preserve">
    <value>The field {0} is required.</value>
    <comment>ItemViewModel</comment>
  </data>
  <data name="RangeErrorMessage" xml:space="preserve">
    <value>The field {0} must be between {1} and {2}.</value>
    <comment>ItemViewModel</comment>
  </data>
  <data name="LengthErrorMessage" xml:space="preserve">
    <value>The length of the field {0} must be between {1} and {2}.</value>
    <comment>ItemViewModel</comment>
  </data>
  <data name="NewEntry" xml:space="preserve">
    <value>New Entry</value>
    <comment>ItemViewModel</comment>
  </data>
  <data name="SearchBarcode" xml:space="preserve">
    <value>Search Barcode</value>
    <comment>ItemPage</comment>
  </data>
</root>